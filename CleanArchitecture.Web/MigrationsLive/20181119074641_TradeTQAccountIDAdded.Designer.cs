// <auto-generated />
using System;
using CleanArchitecture.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanArchitecture.Web.Migrations
{
    [DbContext(typeof(CleanArchitectureContext))]
    [Migration("20181119074641_TradeTQAccountIDAdded")]
    partial class TradeTQAccountIDAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanArchitecture.Core.Entities.AddressMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressLable")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDefaultAddress");

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("AddressMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommAPIServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("APID");

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Priority");

                    b.Property<string>("SMSBalURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SMSSendURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommAPIServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ParsingDataID");

                    b.Property<long>("RequestID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseSuccess");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceproviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CommServiceTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SerproName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CommServiceproviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("CommServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Communication.Market", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrencyName")
                        .IsRequired();

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("isBaseCurrency");

                    b.HasKey("Id");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.CompainTrail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ComplainId");

                    b.Property<string>("Complainstatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("CompainTrail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.Complainmaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("TypeId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("Complainmaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.Typemaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<short>("Status");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Typemaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.AppType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AppType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.CityMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("StateID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CityMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.CountryMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CountryMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.DemonConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IPAdd")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("PortAdd");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DemonConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.Limits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MaxAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtDaily")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtMonthly")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtWeekly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MaxRangeDaily");

                    b.Property<long>("MaxRangeMonthly");

                    b.Property<long>("MaxRangeWeekly");

                    b.Property<long>("Maxrange");

                    b.Property<decimal>("MinAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtDaily")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtMonthly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtWeekly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MinRange");

                    b.Property<long>("MinRangeDaily");

                    b.Property<long>("MinRangeMonthly");

                    b.Property<long>("MinRangeWeekly");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiceDetailJson")
                        .HasColumnType("text");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("LimitId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<short>("ServiceType");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("ServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AppKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ServiceProConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DemonConfigID");

                    b.Property<long>("LimitID");

                    b.Property<long>("ProTypeID");

                    b.Property<long>("ServiceProConfigID");

                    b.Property<long>("ServiceProID");

                    b.Property<short>("Status");

                    b.Property<long>("ThirPartyAPIID");

                    b.Property<long>("TrnTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiveProTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceStastics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CirculatingSupply");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("IssueDate");

                    b.Property<decimal>("IssuePrice");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MaxSupply");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("VolGlobal")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStastics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceTypeMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeMapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.StateMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("StateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ZipCodeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipAreaName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("ZipCodeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Culture.Cultures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.DepositHistory", b =>
                {
                    b.Property<string>("TrnID")
                        .HasMaxLength(100);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("APITopUpRefNo");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Confirmations");

                    b.Property<string>("ConfirmedTime")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EpochTimePure");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("IsProcessing");

                    b.Property<long>("OrderID");

                    b.Property<string>("RouteTag");

                    b.Property<string>("SMSCode")
                        .IsRequired();

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SystemRemarks");

                    b.Property<string>("TimeEpoch")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("TrnID", "Address");

                    b.HasAlternateKey("Address", "TrnID");

                    b.ToTable("DepositHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.DeviceStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id", "UserID");

                    b.HasAlternateKey("UserID");

                    b.ToTable("DeviceStore");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.EmailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasMaxLength(500);

                    b.Property<string>("BCC")
                        .HasMaxLength(500);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("EmailType");

                    b.Property<string>("Recepient")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("SendBy");

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EmailQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYC.KYCLevelMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("KYCName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("Level");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("kYCLevelMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYC.PersonalVerification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackImage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<string>("FrontImage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long>("KYCLevelId");

                    b.Property<string>("SelfieImage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<short>("Status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.Property<string>("ValidIdentityCard")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("VerifyStatus");

                    b.HasKey("Id");

                    b.ToTable("PersonalVerification");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.DeviceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DeviceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.IpHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IpHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.IpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("IpAliasName")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("HostId");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int?>("ModeId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModeId");

                    b.ToTable("LoginLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.MessagingQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MobileNo");

                    b.Property<string>("RespText")
                        .HasMaxLength(1000);

                    b.Property<short>("SMSSendBy");

                    b.Property<short>("SMSServiceID");

                    b.Property<string>("SMSText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MessagingQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Modes.Mode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModeType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Mode");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NotificationQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<string>("TickerText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NotificationQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ProductConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Profile_Management.ProfileMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DepositFee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("EnableStatus");

                    b.Property<int>("Level");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<decimal>("Tradingfee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TypeId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("WithdrawalLimit")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Withdrawalfee")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id");

                    b.ToTable("ProfileMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Profile_Management.SubscriptionMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveStatus");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<long>("ProfileId");

                    b.Property<DateTime>("StartDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RequestFormatMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MethodType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RequestFormat")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("RequestID")
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("contentType")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("RequestFormatMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CultureId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RouteConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfirmationCount");

                    b.Property<decimal>("ConvertAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDelayAddress");

                    b.Property<long>("LimitId");

                    b.Property<string>("OpCode")
                        .HasMaxLength(50);

                    b.Property<short>("Priority");

                    b.Property<long>("ProductID");

                    b.Property<string>("ProviderWalletID")
                        .HasMaxLength(100);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("SerProDetailID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusCheckUrl");

                    b.Property<string>("TransactionUrl");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ValidationUrl");

                    b.HasKey("Id");

                    b.ToTable("RouteConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TemplateMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long>("TemplateID");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TemplateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIBalURL");

                    b.Property<string>("APIName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("APIRequestBody");

                    b.Property<string>("APISendURL")
                        .IsRequired();

                    b.Property<string>("APIStatusCheckURL");

                    b.Property<string>("APIValidateURL");

                    b.Property<short>("AppType");

                    b.Property<string>("AuthHeader");

                    b.Property<string>("ContentType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("HashCode");

                    b.Property<string>("HashCodeRecheck");

                    b.Property<short>("HashType");

                    b.Property<string>("MerchantCode");

                    b.Property<string>("MethodType");

                    b.Property<long>("ParsingDataID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseHold");

                    b.Property<string>("ResponseSuccess");

                    b.Property<short>("Status");

                    b.Property<string>("TimeStamp");

                    b.Property<string>("TransactionIdPrefix");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIResponseConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BalanceRegex");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorCodeRegex");

                    b.Property<string>("OprTrnRefNoRegex");

                    b.Property<string>("Param1Regex");

                    b.Property<string>("Param2Regex");

                    b.Property<string>("Param3Regex");

                    b.Property<string>("ResponseCodeRegex");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsgRegex");

                    b.Property<string>("StatusRegex");

                    b.Property<string>("TrnRefNoRegex");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIResponseConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDone");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeBitGoDelayAddresses", b =>
                {
                    b.Property<string>("TrnID")
                        .HasMaxLength(100);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BitgoWalletId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CoinSpecific")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("GenerateBit");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.Property<long>("WalletTypeId");

                    b.HasKey("TrnID");

                    b.ToTable("TradeBitGoDelayAddressess");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<decimal>("AskPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeliveryAccountID");

                    b.Property<decimal>("DeliveryTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DeliveryWalletID");

                    b.Property<string>("Delivery_Currency");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsCancelled");

                    b.Property<long>("MemberID");

                    b.Property<string>("OrderAccountID");

                    b.Property<decimal>("OrderTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OrderWalletID");

                    b.Property<string>("Order_Currency");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<decimal>("SellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SettledBuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<decimal>("SettledSellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<decimal>("TakerPer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<string>("TrnTypeName");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("TradeTransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.FavouritePair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("PairId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("FavouritePair");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.PoolOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CancelID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DMemberID");

                    b.Property<string>("DRemarks");

                    b.Property<decimal>("DeliveryAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DiscPer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DiscRs")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OMemberID");

                    b.Property<string>("ORemarks");

                    b.Property<decimal>("OrderAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("PayMode");

                    b.Property<long>("PoolID");

                    b.Property<short>("Status");

                    b.Property<short>("TrnMode");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<string>("UserWalletAccID");

                    b.Property<long>("UserWalletID");

                    b.HasKey("Id");

                    b.ToTable("PoolOrder");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.SettledTradeTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<decimal>("AskPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveryTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DeliveryWalletID");

                    b.Property<string>("Delivery_Currency");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsCancelled");

                    b.Property<long>("MemberID");

                    b.Property<decimal>("OrderTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OrderWalletID");

                    b.Property<string>("Order_Currency");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<decimal>("SellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SettledBuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<decimal>("SettledSellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<decimal>("TakerPer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<string>("TrnTypeName");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("SettledTradeTransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeBuyerList", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("BuyReqID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsProcessing");

                    b.Property<long>("PaidServiceID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("TradeBuyerList");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeBuyRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TrnNo");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("BuyStockID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("IsCancel");

                    b.Property<short>("IsPartialProceed");

                    b.Property<short>("IsProcessing");

                    b.Property<decimal>("PaidQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("PaidServiceID");

                    b.Property<long>("PairID");

                    b.Property<decimal>("PendingQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("PickupDate");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("SellStockID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.HasKey("Id", "TrnNo");

                    b.HasAlternateKey("TrnNo");

                    b.ToTable("TradeBuyRequest");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeCancelQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal?>("DeliverBidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DeliverQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DeliverServiceID");

                    b.Property<long>("OrderID");

                    b.Property<short?>("OrderType");

                    b.Property<decimal>("PendingBuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired();

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradeCancelQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeGraphDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TranNo");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChangePer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DataDate");

                    b.Property<decimal>("High24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("High52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("HighWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LTP")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LowWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("PairId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<decimal>("TodayClose")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TodayOpen")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id", "TranNo");

                    b.HasAlternateKey("TranNo");

                    b.ToTable("TradeGraphDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyFees")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMaxPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMaxQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMinPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMinQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FeesCurrency")
                        .IsRequired();

                    b.Property<long>("PairId");

                    b.Property<decimal>("SellFees")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMaxPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMaxQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMinPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMinQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePairDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairMaster", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("BaseCurrencyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<long>("SecondaryCurrencyId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletMasterID");

                    b.HasKey("Id");

                    b.ToTable("TradePairMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairStastics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChangePer24")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChangeVol24")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("CurrencyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("CurrentRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("High24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("High52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("HighWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LTP")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LowWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("PairId");

                    b.Property<short>("Status");

                    b.Property<DateTime>("TranDate");

                    b.Property<short>("UpDownBit");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePairStastics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountPerPrice");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePoolConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SellServiceID");

                    b.Property<long>("BuyServiceID");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CountPerPrice");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("GUID");

                    b.Property<short>("IsSleepMode");

                    b.Property<decimal>("Landing")
                        .HasColumnType("decimal(37, 16)");

                    b.Property<short>("OnProcessing");

                    b.Property<long>("PairId");

                    b.Property<string>("PairName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("ProductID");

                    b.Property<short>("Status");

                    b.Property<short>("TPSPickupStatus");

                    b.Property<decimal>("TotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id", "SellServiceID", "BuyServiceID", "BidPrice");

                    b.HasAlternateKey("BidPrice", "BuyServiceID", "CountPerPrice", "Id", "SellServiceID");

                    b.ToTable("TradePoolMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MakerPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MakerQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MakerTrnNo");

                    b.Property<long>("PoolID");

                    b.Property<long>("SellerListID");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerDisc")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerLoss")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TakerTrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePoolQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeSellerList", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("PoolID");

                    b.Property<long>("BuyServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsProcessing");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("RemainQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("SellServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo", "PoolID");

                    b.HasAlternateKey("PoolID", "TrnNo");

                    b.ToTable("TradeSellerList");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeStopLoss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<decimal>("StopPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("ordertype");

                    b.HasKey("Id");

                    b.ToTable("TradeStopLoss");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeTransactionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OrderID");

                    b.Property<decimal>("PendingQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("SellStockID");

                    b.Property<decimal>("SettledQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("StockID");

                    b.Property<decimal>("TotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradeTransactionStatus");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchNo");

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("IsSettled");

                    b.Property<long>("RefNo");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<short>("Status");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.HasKey("Id");

                    b.ToTable("TransactionAccounts");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("ChargePer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("ChargeRs")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short?>("ChargeType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("GUID");

                    b.Property<long>("MemberID");

                    b.Property<string>("MemberMobile");

                    b.Property<long>("ProductID");

                    b.Property<long>("RouteID");

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<string>("TransactionAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("TrnDate");

                    b.Property<short>("TrnMode");

                    b.Property<string>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("VerifyDone");

                    b.HasKey("Id");

                    b.ToTable("TransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("OprTrnID");

                    b.Property<string>("RequestData")
                        .IsRequired();

                    b.Property<string>("ResponseData");

                    b.Property<DateTime>("ResponseTime");

                    b.Property<long>("SerProDetailID");

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<string>("TrnID");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionRequest");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionStatus", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("ServiceID");

                    b.Property<long>("SerProID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo", "ServiceID", "SerProID");

                    b.HasAlternateKey("SerProID", "ServiceID", "TrnNo");

                    b.ToTable("TransactionStatus");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TrnAcBatch", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TrnAcBatch");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TrnTypeMaster", b =>
                {
                    b.Property<int>("TrnTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<string>("TrnTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnTypeId");

                    b.ToTable("TrnTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("BizRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("BizUser");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("BizUserPhotos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.CustomPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CustomPassword");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.OtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("OtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.RegisterType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveStatus");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<short>("Status");

                    b.Property<string>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RegisterType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempOtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TempOtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempUserRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<string>("Mobile");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RegTypeId");

                    b.Property<bool>("RegisterStatus");

                    b.Property<string>("SecurityStemp");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TempUserRegister");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.UserKeyMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.Property<string>("uniqueKey")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserKeyMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.UserChangeLog.UserLogChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Newvalue");

                    b.Property<string>("Oldvalue");

                    b.Property<short>("Status");

                    b.Property<string>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogChange");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.BeneficiaryMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("IsWhiteListed");

                    b.Property<string>("Name");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("BeneficiaryMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.BizUserTypeMapping", b =>
                {
                    b.Property<long>("UserID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("UserType");

                    b.HasKey("UserID");

                    b.ToTable("BizUserTypeMapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.ChargeRuleMaster", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("WalletType");

                    b.Property<int>("ChargeType");

                    b.Property<decimal>("ChargeValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Name");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType", "WalletType");

                    b.ToTable("ChargeRuleMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.ConvertFundHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DestinationPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("FromWalletId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SourcePrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("ToWalletId");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ConvertFundHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.DepositCounterLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DepositCounterMasterId");

                    b.Property<long>("LastLimit");

                    b.Property<string>("LastTrnID");

                    b.Property<string>("NewTxnID");

                    b.Property<string>("NextBatchPrvID");

                    b.Property<string>("PreviousTrnID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DepositCounterLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.DepositCounterMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("SerProId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastTrnID");

                    b.Property<long>("Limit");

                    b.Property<long>("MaxLimit");

                    b.Property<string>("PreviousTrnID");

                    b.Property<int>("RecordCount");

                    b.Property<short>("Status");

                    b.Property<long>("TPSPickupStatus");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("prevIterationID");

                    b.HasKey("WalletTypeID", "SerProId");

                    b.HasAlternateKey("SerProId", "WalletTypeID");

                    b.ToTable("DepositCounterMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.LimitRuleMaster", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("WalletType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Name");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType", "WalletType");

                    b.ToTable("LimitRuleMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.MemberShadowBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MemberShadowLimitId");

                    b.Property<string>("Remarks");

                    b.Property<decimal>("ShadowAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.Property<long>("WalletTypeId");

                    b.HasKey("Id");

                    b.ToTable("MemberShadowBalance");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.MemberShadowLimit", b =>
                {
                    b.Property<long>("MemberTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ShadowLimitAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletType");

                    b.HasKey("MemberTypeId");

                    b.ToTable("MemberShadowLimit");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.StckingScheme", b =>
                {
                    b.Property<long>("WalletType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxLimitAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinLimitAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Percent");

                    b.Property<short>("Status");

                    b.Property<string>("TimePeriod")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletType");

                    b.ToTable("StckingScheme");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.TradeDepositCompletedTrn", b =>
                {
                    b.Property<string>("Address");

                    b.Property<string>("TrnID");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status");

                    b.HasKey("Address", "TrnID");

                    b.ToTable("TradeDepositCompletedTrn");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.UserPreferencesMaster", b =>
                {
                    b.Property<long>("UserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsWhitelisting");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("UserID");

                    b.ToTable("UserPreferencesMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.UserStacking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Remarks");

                    b.Property<long>("SchemeId");

                    b.Property<decimal>("StackingAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UserStacking");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletAllowTrn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<byte>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("WalletAllowTrns");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletLimitConfiguration", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("WalletId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double?>("EndTimeUnix");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("LifeTime");

                    b.Property<decimal>("LimitPerDay")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerHour")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerTransaction")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double?>("StartTimeUnix");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType", "WalletId");

                    b.ToTable("WalletLimitConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletLimitConfigurationMaster", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("EndTimeUnix")
                        .HasColumnType("float");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("LifeTime");

                    b.Property<decimal>("LimitPerDay")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerHour")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerTransaction")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("StartTimeUnix")
                        .HasColumnType("float");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType");

                    b.ToTable("WalletLimitConfigurationMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletTransactionOrder", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DTrnNo");

                    b.Property<long>("DWalletID");

                    b.Property<long>("OTrnNo");

                    b.Property<long>("OWalletID");

                    b.Property<int>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrnDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("OrderID");

                    b.ToTable("WalletTransactionOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<Guid>("Guid")
                        .HasMaxLength(50);

                    b.Property<long>("MemberID");

                    b.Property<decimal>("SettedAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnRefNo");

                    b.Property<int>("TrnType");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.Property<int>("WalletTrnType");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("TrnNo");

                    b.ToTable("WalletTransactionQueues");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WithdrawHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APITopUpRefNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Charge");

                    b.Property<long>("Confirmations");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("IsProcessing");

                    b.Property<string>("RouteTag")
                        .IsRequired();

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("SerProID");

                    b.Property<short>("State");

                    b.Property<short>("Status");

                    b.Property<string>("SystemRemarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrnDate");

                    b.Property<string>("TrnID")
                        .HasMaxLength(1000);

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.Property<decimal>("Value");

                    b.Property<long>("Wallet");

                    b.Property<string>("confirmedTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("unconfirmedTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WithdrawHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletLedger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PostBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PreBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long>("ToWalletId");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("WalletLedgers");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletMaster", b =>
                {
                    b.Property<string>("AccWalletID")
                        .HasMaxLength(16);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("IsDefaultWallet");

                    b.Property<bool>("IsValid");

                    b.Property<string>("PublicAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletTypeID");

                    b.Property<string>("Walletname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AccWalletID");

                    b.ToTable("WalletMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DRemarks");

                    b.Property<long>("DWalletMasterID");

                    b.Property<decimal>("DeliveryAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("DeliveryGivenBy");

                    b.Property<DateTime?>("DeliveryGivenDate");

                    b.Property<string>("ORemarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OWalletMasterID");

                    b.Property<decimal>("OrderAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderType");

                    b.Property<int>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("WalletOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("ConfirmationCount");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short?>("IsDefaultWallet");

                    b.Property<short>("IsDepositionAllow");

                    b.Property<short>("IsTransactionWallet");

                    b.Property<short>("IsWithdrawalAllow");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WalletTypeName")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("WalletTypeMasters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("BizRolesClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("BizUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("BizUserToken");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Modes.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Culture.Cultures", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
