// <auto-generated />
using System;
using CleanArchitecture.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanArchitecture.Web.Migrations
{
    [DbContext(typeof(CleanArchitectureContext))]
    [Migration("20181015110015_UpdateWalletServiceV11510")]
    partial class UpdateWalletServiceV11510
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanArchitecture.Core.Entities.AddressMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressLable")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDefaultAddress");

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("AddressMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommAPIServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("APID");

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Priority");

                    b.Property<string>("SMSBalURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SMSSendURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommAPIServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ParsingDataID");

                    b.Property<long>("RequestID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseSuccess");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceproviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CommServiceTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SerproName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CommServiceproviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("CommServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.AppType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AppType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.DemonConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IPAdd")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("PortAdd");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DemonConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.Limits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MaxAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtDaily")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtMonthly")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtWeekly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MaxRangeDaily");

                    b.Property<long>("MaxRangeMonthly");

                    b.Property<long>("MaxRangeWeekly");

                    b.Property<long>("Maxrange");

                    b.Property<decimal>("MinAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtDaily")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtMonthly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtWeekly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MinRange");

                    b.Property<long>("MinRangeDaily");

                    b.Property<long>("MinRangeMonthly");

                    b.Property<long>("MinRangeWeekly");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiceDetailJson")
                        .HasColumnType("text");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("LimitId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<short>("ServiceType");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("ServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AppKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ServiceProConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DemonConfigID");

                    b.Property<long>("LimitID");

                    b.Property<long>("ProTypeID");

                    b.Property<long>("ServiceProConfigID");

                    b.Property<long>("ServiceProID");

                    b.Property<short>("Status");

                    b.Property<long>("ThirPartyAPIID");

                    b.Property<long>("TrnTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiveProTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceStastics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CirculatingSupply");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("IssueDate");

                    b.Property<decimal>("IssuePrice");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MaxSupply");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<decimal>("VolGlobal")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStastics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Culture.Cultures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.DepositHistory", b =>
                {
                    b.Property<string>("TrnID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("APITopUpRefNo");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Confirmations");

                    b.Property<string>("ConfirmedTime")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EpochTimePure")
                        .IsRequired();

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("IsProcessing");

                    b.Property<long>("OrderID");

                    b.Property<string>("RouteTag");

                    b.Property<string>("SMSCode")
                        .IsRequired();

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SystemRemarks");

                    b.Property<string>("TimeEpoch")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("TrnID");

                    b.ToTable("DepositHistorys");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.EmailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasMaxLength(500);

                    b.Property<string>("BCC")
                        .HasMaxLength(500);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("EmailType");

                    b.Property<string>("Recepient")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("SendBy");

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EmailQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.IpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("HostId");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int?>("ModeId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModeId");

                    b.ToTable("LoginLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.MessagingQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MobileNo");

                    b.Property<string>("RespText")
                        .HasMaxLength(1000);

                    b.Property<short>("SMSSendBy");

                    b.Property<short>("SMSServiceID");

                    b.Property<string>("SMSText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MessagingQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Modes.Mode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModeType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Mode");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NotificationQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<string>("TickerText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NotificationQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ProductConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("ServiceID");

                    b.Property<long>("StateID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RequestFormatMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MethodType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RequestFormat")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("RequestID")
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("contentType")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("RequestFormatMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CultureId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RouteConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDelayAddress");

                    b.Property<long>("LimitId");

                    b.Property<string>("OpCode")
                        .HasMaxLength(50);

                    b.Property<short>("Priority");

                    b.Property<long>("ProductID");

                    b.Property<string>("ProviderWalletID")
                        .HasMaxLength(100);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusCheckUrl");

                    b.Property<string>("TransactionUrl");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("ValidationUrl");

                    b.HasKey("Id");

                    b.ToTable("RouteConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TemplateMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long>("TemplateID");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TemplateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIBalURL");

                    b.Property<string>("APIName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("APIRequestBody");

                    b.Property<string>("APISendURL")
                        .IsRequired();

                    b.Property<string>("APIStatusCheckURL");

                    b.Property<string>("APIValidateURL");

                    b.Property<short>("AppType");

                    b.Property<string>("AuthHeader");

                    b.Property<string>("ContentType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("HashCode");

                    b.Property<string>("HashCodeRecheck");

                    b.Property<short>("HashType");

                    b.Property<string>("MerchantCode");

                    b.Property<string>("MethodType");

                    b.Property<long>("ParsingDataID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseHold");

                    b.Property<string>("ResponseSuccess");

                    b.Property<long>("SerProConfigurationID");

                    b.Property<short>("Status");

                    b.Property<string>("TransactionIdPrefix");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIResponseConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BalanceRegex");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorCodeRegex");

                    b.Property<string>("OprTrnRefNoRegex");

                    b.Property<string>("Param1Regex");

                    b.Property<string>("Param2Regex");

                    b.Property<string>("Param3Regex");

                    b.Property<string>("ResponseCodeRegex");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsgRegex");

                    b.Property<string>("StatusRegex");

                    b.Property<string>("TrnRefNoRegex");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIResponseConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDone");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeBitGoDelayAddresses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BitgoWalletId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CoinSpecific")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("GenerateBit");

                    b.Property<short>("Status");

                    b.Property<string>("TrnID")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.Property<long>("WalletTypeId");

                    b.HasKey("Id");

                    b.ToTable("TradeBitGoDelayAddressess");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeTransactionQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TrnNo");

                    b.Property<decimal>("AskPrice");

                    b.Property<decimal>("BidPrice");

                    b.Property<decimal>("BuyQty");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveryTotalQty");

                    b.Property<long>("DeliveryWalletID");

                    b.Property<string>("Delivery_Currency");

                    b.Property<short>("IsCancelled");

                    b.Property<long>("MemberID");

                    b.Property<decimal>("OrderTotalQty");

                    b.Property<long>("OrderWalletID");

                    b.Property<string>("Order_Currency");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<long>("ProductID");

                    b.Property<int>("RoutID");

                    b.Property<decimal>("SellQty");

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<decimal>("SettledBuyQty");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<decimal>("SettledSellQty");

                    b.Property<short>("Status");

                    b.Property<int>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<decimal>("TakerPer");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<string>("TrnTypeName");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id", "TrnNo");

                    b.ToTable("TradeTransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeCancelQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal?>("DeliverBidPrice");

                    b.Property<decimal>("DeliverQty");

                    b.Property<long>("DeliverServiceID");

                    b.Property<long>("OrderID");

                    b.Property<short?>("OrderType");

                    b.Property<decimal>("PendingBuyQty");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired();

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradeCancelQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyMaxPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMaxQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMinPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMinQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("CurrencyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Currentrate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DailyHigh")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DailyLow")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("FeeType");

                    b.Property<long>("LastTrnNo");

                    b.Property<long>("PairId");

                    b.Property<decimal>("SellMaxPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMaxQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMinPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMinQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id");

                    b.ToTable("TradePairDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BaseCurrencyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<long>("SecondaryCurrencyId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletMasterID");

                    b.HasKey("Id");

                    b.ToTable("TradePairMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SellServiceID");

                    b.Property<long>("BuyServiceID");

                    b.Property<long>("BidPrice");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("IsSleepMode");

                    b.Property<decimal>("Landing")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37, 16)");

                    b.Property<short>("OnProcessing");

                    b.Property<string>("PairName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("ProductID");

                    b.Property<short>("Status");

                    b.Property<short>("TPSPickupStatus");

                    b.Property<decimal>("TotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id", "SellServiceID", "BuyServiceID", "BidPrice");

                    b.HasAlternateKey("BidPrice", "BuyServiceID", "Id", "SellServiceID");

                    b.ToTable("TradePoolMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeStopLoss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<short>("ordertype");

                    b.HasKey("Id");

                    b.ToTable("TradeStopLoss");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchNo");

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("IsSettled");

                    b.Property<long>("RefNo");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<short>("Status");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.HasKey("Id");

                    b.ToTable("TransactionAccounts");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TrnAcBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TrnAcBatch");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("BizRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("BizUser");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("BizUserPhotos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.OtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("OtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.RegisterType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveStatus");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<short>("Status");

                    b.Property<string>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RegisterType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempOtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TempOtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempUserRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<string>("Mobile");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RegTypeId");

                    b.Property<bool>("RegisterStatus");

                    b.Property<string>("SecurityStemp");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TempUserRegister");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletAllowTrn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<byte>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("WalletAllowTrns");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletTransactionOrder", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<long>("DTrnNo");

                    b.Property<long>("DWalletID");

                    b.Property<long>("OTrnNo");

                    b.Property<long>("OWalletID");

                    b.Property<byte>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired();

                    b.Property<DateTime>("TrnDate");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("OrderID");

                    b.ToTable("WalletTransactionOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("Guid")
                        .HasMaxLength(50);

                    b.Property<long>("MemberID");

                    b.Property<byte>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnRefNo");

                    b.Property<byte>("TrnType");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.HasKey("TrnNo");

                    b.ToTable("WalletTransactionQueues");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletLedger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PostBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PreBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long>("ToWalletId");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("WalletLedgers");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccWalletID")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDefaultWallet");

                    b.Property<bool>("IsValid");

                    b.Property<string>("PublicAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletTypeID");

                    b.Property<string>("Walletname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WalletMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DRemarks");

                    b.Property<long>("DWalletMasterID");

                    b.Property<decimal>("DeliveryAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("DeliveryGivenBy");

                    b.Property<DateTime?>("DeliveryGivenDate");

                    b.Property<string>("ORemarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OWalletMasterID");

                    b.Property<decimal>("OrderAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderType");

                    b.Property<int>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("WalletOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("IsDepositionAllow");

                    b.Property<short>("IsTransactionWallet");

                    b.Property<short>("IsWithdrawalAllow");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("WalletTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WalletTypeMasters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("BizRolesClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("BizUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("BizUserToken");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Modes.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Culture.Cultures", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
