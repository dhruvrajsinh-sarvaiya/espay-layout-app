// <auto-generated />
using System;
using CleanArchitecture.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CleanArchitecture.Web.Migrations
{
    [DbContext(typeof(CleanArchitectureContext))]
    [Migration("20190123071605_AddGroupMaster_WatchMaster")]
    partial class AddGroupMaster_WatchMaster
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CleanArchitecture.Core.Entities.AddressMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("AddressLable")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDefaultAddress");

                    b.Property<string>("OriginalAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("AddressMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Backoffice.IPRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EndIp")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("StartIp")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IPRange");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Backoffice.PasswordPolicy.UserLinkMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("LinkvalidTime");

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.Property<string>("UserLinkData");

                    b.HasKey("Id");

                    b.ToTable("UserLinkMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Backoffice.PasswordPolicy.UserPasswordPolicyMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("LinkExpiryTime");

                    b.Property<int>("MaxfppwdDay");

                    b.Property<int>("MaxfppwdMonth");

                    b.Property<int>("OTPExpiryTime");

                    b.Property<int>("PwdExpiretime");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserPasswordPolicyMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Charges.ChargeConfigurationDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChargeConfigurationMasterID");

                    b.Property<short>("ChargeDistributionBasedOn");

                    b.Property<long>("ChargeType");

                    b.Property<decimal>("ChargeValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("ChargeValueType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DeductionWalletTypeId");

                    b.Property<decimal>("MakerCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Remarks");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ChargeConfigurationDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Charges.ChargeConfigurationMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("TrnType");

                    b.Property<short>("KYCComplaint");

                    b.Property<long>("SpecialChargeConfigurationID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remarks");

                    b.Property<short>("SlabType");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeID", "TrnType", "KYCComplaint", "SpecialChargeConfigurationID");

                    b.HasAlternateKey("KYCComplaint", "SpecialChargeConfigurationID", "TrnType", "WalletTypeID");

                    b.ToTable("ChargeConfigurationMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Charges.SpecialChargeConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Remarks");

                    b.Property<short>("Status");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SpecialChargeConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Charges.TrnChargeLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("BatchNo");

                    b.Property<decimal?>("Charge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("ChargeConfigurationDetailID");

                    b.Property<long?>("ChargeConfigurationMasterID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DUserID");

                    b.Property<long>("DWalletID");

                    b.Property<decimal?>("MakerCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OWalletID");

                    b.Property<long>("OuserID");

                    b.Property<string>("Remarks");

                    b.Property<short>("SlabType");

                    b.Property<long?>("StakingChargeMasterID");

                    b.Property<short>("Status");

                    b.Property<decimal?>("TakerCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("TimeStamp");

                    b.Property<long>("TrnNo");

                    b.Property<long>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("TrnChargeLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommAPIServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Priority");

                    b.Property<string>("SMSBalURL")
                        .HasMaxLength(200);

                    b.Property<string>("SMSSendURL")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SenderID")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommAPIServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommSerproID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ParsingDataID");

                    b.Property<long>("RequestID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseSuccess");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceproviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<long>("CommServiceTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SerproName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CommServiceproviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.CommServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("CommServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Communication.Market", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrencyName")
                        .IsRequired();

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("isBaseCurrency");

                    b.HasKey("Id");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.CompainTrail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ComplainId");

                    b.Property<long>("Complainstatus");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("CompainTrail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.Complainmaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ComplaintPriorityId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("TypeId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("Complainmaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.ComplainStatusTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompainStatusType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComplainStatusTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.ComplaintPriorityMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PriorityTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ComplaintPriorityMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Complaint.Typemaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Typemaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.AppType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AppType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.CityMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("StateID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CityMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.CoinListRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIDocumentPath");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("AddressLine2");

                    b.Property<decimal>("CirculatingSupply")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("City");

                    b.Property<string>("CoinAbbreviationCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("CoinTokenAddress");

                    b.Property<short>("CoinType");

                    b.Property<string>("Community")
                        .HasColumnType("text");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurListOnOtherExng");

                    b.Property<long>("DecimalPlace");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Explorer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("GithubLink")
                        .IsRequired();

                    b.Property<string>("HowFundsWereRaised");

                    b.Property<string>("IconUrl");

                    b.Property<string>("Introduction")
                        .IsRequired();

                    b.Property<DateTime>("IssueDate");

                    b.Property<decimal>("IssuePrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<decimal>("MaxSupply")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Phone");

                    b.Property<string>("Premine")
                        .IsRequired();

                    b.Property<string>("ProjectName")
                        .IsRequired();

                    b.Property<string>("ProjectWebsiteLink");

                    b.Property<string>("State");

                    b.Property<short>("Status");

                    b.Property<string>("StreetAddress");

                    b.Property<decimal>("TotalSupply")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TrnFee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WebsiteFAQ");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired();

                    b.Property<string>("WhitePaper")
                        .IsRequired();

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("CoinListRequest");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ConfigurationMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.CountryMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CountryMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.DemonConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IPAdd")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("PortAdd");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DemonConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.LanguageMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Languagename")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("LanguageMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.Limits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MaxAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtDaily")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtMonthly")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)))
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmtWeekly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MaxRangeDaily");

                    b.Property<long>("MaxRangeMonthly");

                    b.Property<long>("MaxRangeWeekly");

                    b.Property<long>("Maxrange");

                    b.Property<decimal>("MinAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtDaily")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtMonthly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmtWeekly")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MinRange");

                    b.Property<long>("MinRangeDaily");

                    b.Property<long>("MinRangeMonthly");

                    b.Property<long>("MinRangeWeekly");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ProfileConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ConfigType")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProfileConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiceDetailJson")
                        .HasColumnType("text");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("LimitId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<short>("ServiceType");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("ServiceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AppKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ServiceProConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DemonConfigID");

                    b.Property<long>("LimitID");

                    b.Property<long>("ProTypeID");

                    b.Property<string>("SerProDetailName");

                    b.Property<long>("ServiceProConfigID");

                    b.Property<long>("ServiceProID");

                    b.Property<short>("Status");

                    b.Property<long>("ThirPartyAPIID");

                    b.Property<long>("TrnTypeID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceProviderType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiveProTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviderType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceStastics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CirculatingSupply");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("IssueDate");

                    b.Property<decimal>("IssuePrice");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MaxSupply");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("VolGlobal")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStastics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ServiceTypeMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceId");

                    b.Property<short>("Status");

                    b.Property<long>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeMapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.StateMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("StateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.UserConfigurationMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConfigurationMasterId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsconfigurationEnable");

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserConfigurationMapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Configuration.ZipCodeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ZipAreaName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("ZipCodeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Culture.Cultures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.DepositHistory", b =>
                {
                    b.Property<string>("TrnID")
                        .HasMaxLength(100);

                    b.Property<string>("Address")
                        .HasMaxLength(50);

                    b.Property<string>("APITopUpRefNo");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Confirmations");

                    b.Property<string>("ConfirmedTime")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EpochTimePure");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("IsInternalTrn");

                    b.Property<byte>("IsProcessing");

                    b.Property<long>("OrderID");

                    b.Property<string>("RouteTag");

                    b.Property<string>("SMSCode")
                        .IsRequired();

                    b.Property<long>("SerProID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SystemRemarks");

                    b.Property<string>("TimeEpoch")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("TrnID", "Address");

                    b.HasAlternateKey("Address", "TrnID");

                    b.ToTable("DepositHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.DeviceStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id", "UserID");

                    b.HasAlternateKey("UserID");

                    b.ToTable("DeviceStore");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.EmailMaster.EmailMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPrimary");

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("EmailMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.EmailQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasMaxLength(500);

                    b.Property<string>("BCC")
                        .HasMaxLength(500);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("CC")
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("EmailType");

                    b.Property<string>("Recepient")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("SendBy");

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EmailQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ErrorInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorMsg")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("RefNo");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ErrorInfo");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYC.KYCLevelMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("KYCName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("Level");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("kYCLevelMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYC.PersonalVerification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackImage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<string>("FrontImage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long>("KYCLevelId");

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.Property<string>("SelfieImage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<short>("Status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserID");

                    b.Property<string>("ValidIdentityCard")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("VerifyStatus");

                    b.HasKey("Id");

                    b.ToTable("PersonalVerification");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYCConfiguration.DocumentMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DocumentMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYCConfiguration.KYCIdentityConfigurationMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("KYCConfigurationMasterId");

                    b.Property<long>("LevelId");

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("Userid");

                    b.HasKey("Id");

                    b.ToTable("kYCIdentityConfigurationMapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.KYCConfiguration.KYCIdentityMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DocumentMasterId")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("kYCIdentityMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .HasMaxLength(2000);

                    b.Property<string>("HostName")
                        .HasMaxLength(250);

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15);

                    b.Property<string>("Location")
                        .HasMaxLength(2000);

                    b.Property<string>("Mode")
                        .HasMaxLength(10);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.DeviceMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Device")
                        .HasMaxLength(250);

                    b.Property<string>("DeviceId")
                        .HasMaxLength(250);

                    b.Property<string>("DeviceOS")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DeviceMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.IpHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IpHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.IpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("IpAliasName")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("IpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("HostId");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int?>("ModeId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ModeId");

                    b.ToTable("LoginLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.SignUpLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .HasMaxLength(2000);

                    b.Property<string>("HostName")
                        .HasMaxLength(250);

                    b.Property<string>("IPAddress")
                        .HasMaxLength(15);

                    b.Property<string>("Location")
                        .HasMaxLength(2000);

                    b.Property<string>("Mode")
                        .HasMaxLength(10);

                    b.Property<bool>("RegisterStatus");

                    b.Property<int>("RegisterType");

                    b.Property<short>("Status");

                    b.Property<int>("TempUserId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("SignUpLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.MessagingQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MobileNo");

                    b.Property<string>("RespText")
                        .HasMaxLength(1000);

                    b.Property<short>("SMSSendBy");

                    b.Property<short>("SMSServiceID");

                    b.Property<string>("SMSText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("MessagingQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Modes.Mode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ModeType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Mode");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.ActivityTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.AddRemoveUserWalletRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("FromUserId");

                    b.Property<string>("Message");

                    b.Property<long?>("OwnerApprovalBy");

                    b.Property<DateTime?>("OwnerApprovalDate");

                    b.Property<short>("OwnerApprovalStatus");

                    b.Property<string>("ReceiverEmail")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("RecieverApproveBy")
                        .IsRequired();

                    b.Property<DateTime?>("RecieverApproveDate");

                    b.Property<long>("RoleId");

                    b.Property<short>("Status");

                    b.Property<long>("ToUserId");

                    b.Property<short>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.Property<long>("WalletOwnerUserID");

                    b.HasKey("Id");

                    b.ToTable("AddRemoveUserWalletRequest");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.AllowedChannels", b =>
                {
                    b.Property<long>("ChannelID");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ChannelID");

                    b.ToTable("AllowedChannels");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.AllowTrnTypeRoleWise", b =>
                {
                    b.Property<long>("TrnTypeId");

                    b.Property<long>("RoleId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnTypeId", "RoleId");

                    b.HasAlternateKey("RoleId", "TrnTypeId");

                    b.ToTable("AllowTrnTypeRoleWise");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.AuditActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EntityType")
                        .IsRequired();

                    b.Property<string>("NewValue")
                        .IsRequired();

                    b.Property<string>("OldValue")
                        .IsRequired();

                    b.Property<string>("Remarks");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AuditActivityLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.AutorizedApps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SiteURL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("AutorizedApps");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.BalanceStatistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("EndingBalance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Month");

                    b.Property<decimal>("StartingBalance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletID");

                    b.Property<long>("WalletTypeID");

                    b.Property<short>("Year");

                    b.HasKey("Id");

                    b.ToTable("BalanceStatistics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.BlockWalletTrnTypeMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("TrnTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeID", "TrnTypeID");

                    b.HasAlternateKey("TrnTypeID", "WalletTypeID");

                    b.ToTable("BlockWalletTrnTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.ChargePolicy", b =>
                {
                    b.Property<long>("WalletTrnType");

                    b.Property<long>("WalletType");

                    b.Property<long>("ChargeType");

                    b.Property<decimal>("ChargeValue");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTrnType", "WalletType");

                    b.ToTable("ChargePolicy");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.ChargeTypeMaster", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("ChargeName")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ChargeTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.ColdWalletMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackUpKey")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("KeyId1")
                        .IsRequired();

                    b.Property<string>("KeyId2")
                        .IsRequired();

                    b.Property<string>("KeyId3")
                        .IsRequired();

                    b.Property<string>("PublicKey")
                        .IsRequired();

                    b.Property<short>("Recoverable");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserKey");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("ColdWalletMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.CommissionPolicy", b =>
                {
                    b.Property<long>("WalletTrnType");

                    b.Property<long>("WalletType");

                    b.Property<long>("CommissionType");

                    b.Property<decimal>("CommissionValue");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTrnType", "WalletType");

                    b.ToTable("CommissionPolicy");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.CommissionTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("CommissionTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.CurrencyRateMaster", b =>
                {
                    b.Property<long>("WalletTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("CurrentRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeId");

                    b.ToTable("CurrencyRateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.CurrencyTypeMaster", b =>
                {
                    b.Property<long>("CurrencyTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CurrencyTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("CurrencyTypeId");

                    b.ToTable("CurrencyTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.LeverageMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LeveragePer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeID");

                    b.ToTable("LeverageMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.OrganizationMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<short>("AuthenticationType");

                    b.Property<long>("CityID");

                    b.Property<string>("ContactNo");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<short>("IsDefault");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<short>("TnCAccepted");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("Website")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OrganizationMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.OrganizationUserMaster", b =>
                {
                    b.Property<long>("RoleID");

                    b.Property<long>("UserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OrganizationID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("RoleID", "UserID");

                    b.HasAlternateKey("Id", "RoleID", "UserID");

                    b.ToTable("OrganizationUserMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.ServiceProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ServiceProviderName")
                        .IsRequired();

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceProvider");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.Statastics", b =>
                {
                    b.Property<long>("WalletId");

                    b.Property<long>("WalletType");

                    b.Property<long>("TrnType");

                    b.Property<long>("Hour");

                    b.Property<long>("Day");

                    b.Property<long>("Week");

                    b.Property<long>("Month");

                    b.Property<long>("Year");

                    b.Property<long>("UserId");

                    b.Property<decimal>("Amount");

                    b.Property<long>("Count");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletId", "WalletType", "TrnType", "Hour", "Day", "Week", "Month", "Year", "UserId");

                    b.HasAlternateKey("Day", "Hour", "Month", "TrnType", "UserId", "WalletId", "WalletType", "Week", "Year");

                    b.ToTable("Statastics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.StatasticsDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("StatasticsId");

                    b.Property<short>("Status");

                    b.Property<string>("TrnNo")
                        .IsRequired();

                    b.Property<long>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("StatasticsDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.StopLossMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<decimal>("StopLossPer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeID");

                    b.ToTable("StopLossMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.TransactionBlockedChannel", b =>
                {
                    b.Property<long>("ChannelID");

                    b.Property<long>("TrnType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ChannelID", "TrnType");

                    b.ToTable("TransactionBlockedChannel");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.TransactionPolicy", b =>
                {
                    b.Property<long>("TrnType");

                    b.Property<long>("RoleId");

                    b.Property<string>("AllowedIP")
                        .IsRequired();

                    b.Property<string>("AllowedLocation")
                        .IsRequired();

                    b.Property<short>("AllowedUserType");

                    b.Property<int>("AuthenticationType");

                    b.Property<short>("AuthorityType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DailyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DailyTrnCount");

                    b.Property<double?>("EndTime");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MonthlyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MonthlyTrnCount");

                    b.Property<double?>("StartTime");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("WeeklyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("WeeklyTrnCount");

                    b.Property<decimal>("YearlyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("YearlyTrnCount");

                    b.HasKey("TrnType", "RoleId");

                    b.HasAlternateKey("RoleId", "TrnType");

                    b.ToTable("TransactionPolicy");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.TransactionPolicyAllowedRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("RoleID");

                    b.Property<short>("Status");

                    b.Property<long>("TrnPolicyID");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionPolicyAllowedRole");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.UserActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("ActivityType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Remarks");

                    b.Property<short>("Status");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletID");

                    b.Property<short>("WalletTrnType");

                    b.HasKey("Id");

                    b.ToTable("UserActivityLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.UserMaster", b =>
                {
                    b.Property<long>("BizUserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("BizUserID");

                    b.ToTable("UserMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.UserRoleMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("UserRoleMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.UserTypeMaster", b =>
                {
                    b.Property<long>("UserTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.UserWalletBlockTrnTypeMaster", b =>
                {
                    b.Property<long>("WalletID");

                    b.Property<long>("WTrnTypeMasterID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remarks")
                        .HasMaxLength(150);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletID", "WTrnTypeMasterID");

                    b.ToTable("UserWalletBlockTrnTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.UserWalletMaster", b =>
                {
                    b.Property<string>("AccWalletID")
                        .HasMaxLength(16);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("IsDefaultWallet");

                    b.Property<bool>("IsValid");

                    b.Property<long>("OrganizationID");

                    b.Property<string>("PublicAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("WalletTypeID");

                    b.HasKey("AccWalletID");

                    b.ToTable("UserWalletMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.Wallet_TypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CurrencyTypeID");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WalletTypeName")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("Wallet_TypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.WalletAuthorizeUserMaster", b =>
                {
                    b.Property<long>("UserID");

                    b.Property<long>("WalletID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OrgID");

                    b.Property<long>("RoleID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("UserID", "WalletID");

                    b.HasAlternateKey("Id", "UserID", "WalletID");

                    b.ToTable("WalletAuthorizeUserMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.WalletPolicyAllowedDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("DayNo");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletPolicyID");

                    b.HasKey("Id");

                    b.ToTable("WalletPolicyAllowedDay");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.WalletUsagePolicy", b =>
                {
                    b.Property<long>("WalletType");

                    b.Property<string>("AllowedIP")
                        .IsRequired();

                    b.Property<string>("AllowedLocation")
                        .IsRequired();

                    b.Property<int>("AuthenticationType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DailyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DailyTrnCount");

                    b.Property<double?>("EndTime");

                    b.Property<decimal>("HourlyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("HourlyTrnCount");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LifeTimeTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("LifeTimeTrnCount");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MonthlyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MonthlyTrnCount");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("StartTime");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("WeeklyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("WeeklyTrnCount");

                    b.Property<decimal>("YearlyTrnAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("YearlyTrnCount");

                    b.HasKey("WalletType");

                    b.ToTable("WalletUsagePolicy");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.WalletUsageType", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WalletUsageTypeName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("WalletUsageType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NewWallet.WTrnTypeMaster", b =>
                {
                    b.Property<long>("TrnTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<string>("TrnTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnTypeId");

                    b.ToTable("WTrnTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.NotificationQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<short>("Status");

                    b.Property<string>("Subject")
                        .HasMaxLength(50);

                    b.Property<string>("TickerText")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("NotificationQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.ActivityRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken")
                        .HasMaxLength(4000);

                    b.Property<Guid>("ActivityTypeId");

                    b.Property<string>("AliasName")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Channel")
                        .HasMaxLength(500);

                    b.Property<string>("Connection")
                        .HasMaxLength(500);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(2000);

                    b.Property<long>("ErrorCode");

                    b.Property<Guid>("HostURLId");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(30);

                    b.Property<long>("ModuleTypeId");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<long>("ReturnCode");

                    b.Property<string>("ReturnMsg")
                        .HasMaxLength(8000);

                    b.Property<string>("Session")
                        .HasMaxLength(4000);

                    b.Property<bool>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ActivityRegister");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.ActivityRegisterDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityId");

                    b.Property<string>("Request")
                        .HasMaxLength(8000);

                    b.Property<string>("Response")
                        .HasMaxLength(8000);

                    b.HasKey("Id");

                    b.ToTable("ActivityRegisterDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.ActivityType_Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AliasName")
                        .HasMaxLength(1000);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("Status");

                    b.Property<string>("TypeMaster")
                        .HasMaxLength(4000);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ActivityType_Master");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.ApplicationMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ApplicationMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.HostURLMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AliasName")
                        .HasMaxLength(500);

                    b.Property<string>("HostURL")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("HostURLMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.Org_App_Mapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllowedCallBackURLS")
                        .HasMaxLength(500);

                    b.Property<string>("AllowedLogoutURLS")
                        .HasMaxLength(500);

                    b.Property<string>("AllowedOriginsCORS")
                        .HasMaxLength(500);

                    b.Property<string>("AllowedWebOrigins")
                        .HasMaxLength(500);

                    b.Property<Guid>("AppId");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ApplicationLogo")
                        .HasMaxLength(250);

                    b.Property<Guid>("ClientSecret");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<long>("JWTExpiration");

                    b.Property<Guid>("OrgId");

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Org_App_Mapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Organization.Organization_Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AliasName")
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Organization_Master");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.PhoneMaster.PhoneMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Mobilenumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PhoneMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ProductConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Profile_Management.ProfileLevelMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProfileLevelMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Profile_Management.ProfileMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DepositFee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("DepositLimit")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<bool>("IsProfileExpiry");

                    b.Property<bool>("IsRecursive");

                    b.Property<int>("KYCLevel");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<decimal>("ProfileFree")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Profilelevel");

                    b.Property<short>("Status");

                    b.Property<decimal>("SubscriptionAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("TradeLimit")
                        .HasMaxLength(2000);

                    b.Property<decimal>("Tradingfee")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("TransactionLimit")
                        .HasMaxLength(2000);

                    b.Property<long>("TypeId");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WithdrawalLimit")
                        .HasMaxLength(2000);

                    b.Property<decimal>("Withdrawalfee")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id");

                    b.ToTable("ProfileMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Profile_Management.SubscriptionMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessibleFeatures")
                        .HasMaxLength(2000);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ProfileId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RequestFormatMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MethodType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("RequestFormat")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RequestFormatMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CultureId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.RouteConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfirmationCount");

                    b.Property<decimal>("ConvertAmount")
                        .HasColumnType("decimal(22, 2)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("IsDelayAddress");

                    b.Property<long>("LimitId");

                    b.Property<string>("OpCode")
                        .HasMaxLength(50);

                    b.Property<long>("OrderType");

                    b.Property<long>("PairId");

                    b.Property<short>("Priority");

                    b.Property<long>("ProductID");

                    b.Property<string>("ProviderWalletID")
                        .HasMaxLength(100);

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long>("SerProDetailID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<string>("StatusCheckUrl");

                    b.Property<string>("TransactionUrl");

                    b.Property<int>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("ValidationUrl");

                    b.HasKey("Id");

                    b.ToTable("RouteConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ServiceTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("ServiceTypeID");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.SocialProfile.FollowerMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("FllowerStatus");

                    b.Property<long>("FolowerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<long>("LeaderId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("FollowerMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.SocialProfile.UserProfileConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<long>("LeaderId");

                    b.Property<long>("ProfileConfigId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserProfileConfig");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.SocialProfile.UserSocialProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable");

                    b.Property<string>("ProfileRole")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserSocialProfile");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TemplateCategoryMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("IsOnOff");

                    b.Property<string>("ParameterInfo")
                        .HasMaxLength(500);

                    b.Property<short>("Status");

                    b.Property<long>("TemplateId");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(500);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TemplateCategoryMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TemplateMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CommServiceTypeID");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long>("TemplateID");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TemplateMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIBalURL");

                    b.Property<string>("APIName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("APIRequestBody");

                    b.Property<string>("APISendURL")
                        .IsRequired();

                    b.Property<string>("APIStatusCheckURL");

                    b.Property<string>("APIValidateURL");

                    b.Property<short>("AppType");

                    b.Property<string>("AuthHeader");

                    b.Property<string>("ContentType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("HashCode");

                    b.Property<string>("HashCodeRecheck");

                    b.Property<short>("HashType");

                    b.Property<string>("MerchantCode");

                    b.Property<string>("MethodType");

                    b.Property<long>("ParsingDataID");

                    b.Property<string>("ResponseFailure");

                    b.Property<string>("ResponseHold");

                    b.Property<string>("ResponseSuccess");

                    b.Property<short>("Status");

                    b.Property<string>("TimeStamp");

                    b.Property<string>("TransactionIdPrefix");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ThirdPartyAPIResponseConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BalanceRegex");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ErrorCodeRegex");

                    b.Property<string>("OprTrnRefNoRegex");

                    b.Property<string>("Param1Regex");

                    b.Property<string>("Param2Regex");

                    b.Property<string>("Param3Regex");

                    b.Property<string>("ResponseCodeRegex");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsgRegex");

                    b.Property<string>("StatusRegex");

                    b.Property<string>("TrnRefNoRegex");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ThirdPartyAPIResponseConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDone");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeBitGoDelayAddresses", b =>
                {
                    b.Property<string>("TrnID")
                        .HasMaxLength(100);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BitgoWalletId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CoinName")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CoinSpecific")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("GenerateBit");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.Property<long>("WalletTypeId");

                    b.HasKey("TrnID");

                    b.ToTable("TradeBitGoDelayAddressess");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TradeTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<decimal>("AskPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeliveryAccountID");

                    b.Property<decimal>("DeliveryTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DeliveryWalletID");

                    b.Property<string>("Delivery_Currency");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsCancelled");

                    b.Property<long>("MemberID");

                    b.Property<string>("OrderAccountID");

                    b.Property<decimal>("OrderTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OrderWalletID");

                    b.Property<string>("Order_Currency");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<decimal>("SellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SettledBuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<decimal>("SettledSellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<DateTime>("TrnDate");

                    b.Property<short>("TrnType");

                    b.Property<string>("TrnTypeName");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("ordertype");

                    b.HasKey("TrnNo");

                    b.ToTable("TradeTransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.FavouritePair", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("PairId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("FavouritePair");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.PoolOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CancelID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DMemberID");

                    b.Property<string>("DRemarks");

                    b.Property<decimal>("DeliveryAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DiscPer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DiscRs")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OMemberID");

                    b.Property<string>("ORemarks");

                    b.Property<decimal>("OrderAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("PayMode");

                    b.Property<long>("PoolID");

                    b.Property<short>("Status");

                    b.Property<short>("TrnMode");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<string>("UserWalletAccID");

                    b.Property<long>("UserWalletID");

                    b.HasKey("Id");

                    b.ToTable("PoolOrder");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.SettledTradeTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<decimal>("AskPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeliveryAccountID");

                    b.Property<decimal>("DeliveryTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DeliveryWalletID");

                    b.Property<string>("Delivery_Currency");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsCancelled");

                    b.Property<long>("MemberID");

                    b.Property<string>("OrderAccountID");

                    b.Property<decimal>("OrderTotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OrderWalletID");

                    b.Property<string>("Order_Currency");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<decimal>("SellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SettledBuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<decimal>("SettledSellQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<decimal>("TakerPer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<string>("TrnTypeName");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("SettledTradeTransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeBuyerList", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("BuyReqID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsProcessing");

                    b.Property<long>("PaidServiceID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("TradeBuyerList");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeBuyerListV1", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsProcessing");

                    b.Property<short>("OrderType");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("RemainQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("TradeBuyerListV1");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeBuyRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TrnNo");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("BuyStockID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("IsCancel");

                    b.Property<short>("IsPartialProceed");

                    b.Property<short>("IsProcessing");

                    b.Property<decimal>("PaidQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("PaidServiceID");

                    b.Property<long>("PairID");

                    b.Property<decimal>("PendingQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("PickupDate");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("SellStockID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.HasKey("Id", "TrnNo");

                    b.HasAlternateKey("TrnNo");

                    b.ToTable("TradeBuyRequest");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeCancelQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal?>("DeliverBidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DeliverQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DeliverServiceID");

                    b.Property<long>("OrderID");

                    b.Property<short?>("OrderType");

                    b.Property<decimal>("PendingBuyQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("SettledDate");

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired();

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradeCancelQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeGraphDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TranNo");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChangePer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DataDate");

                    b.Property<decimal>("High24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("High52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("HighWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LTP")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LowWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("PairId");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<decimal>("TodayClose")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TodayOpen")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18, 8)");

                    b.HasKey("Id", "TranNo");

                    b.HasAlternateKey("TranNo");

                    b.ToTable("TradeGraphDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyFees")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMaxPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMaxQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMinPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyMinQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short?>("ChargeType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FeesCurrency")
                        .IsRequired();

                    b.Property<int>("IsMarketTicker");

                    b.Property<long?>("OpenOrderExpiration");

                    b.Property<long>("PairId");

                    b.Property<decimal>("SellFees")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMaxPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMaxQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMinPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellMinQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePairDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairMaster", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("BaseCurrencyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("PairName")
                        .IsRequired();

                    b.Property<long>("SecondaryCurrencyId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletMasterID");

                    b.HasKey("Id");

                    b.ToTable("TradePairMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePairStastics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChangePer24")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChangeValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChangeVol24")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CronDate");

                    b.Property<decimal>("CurrencyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("CurrentRate")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("High24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("High52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("HighWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LTP")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low24Hr")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Low52Week")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LowWeek")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("PairId");

                    b.Property<short>("Status");

                    b.Property<DateTime>("TranDate");

                    b.Property<short>("UpDownBit");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePairStastics");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountPerPrice");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePoolConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SellServiceID");

                    b.Property<long>("BuyServiceID");

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CountPerPrice");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("GUID");

                    b.Property<short>("IsSleepMode");

                    b.Property<decimal>("Landing")
                        .HasColumnType("decimal(37, 16)");

                    b.Property<short>("OnProcessing");

                    b.Property<long>("PairId");

                    b.Property<string>("PairName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("ProductID");

                    b.Property<short>("Status");

                    b.Property<short>("TPSPickupStatus");

                    b.Property<decimal>("TotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id", "SellServiceID", "BuyServiceID", "BidPrice");

                    b.HasAlternateKey("BidPrice", "BuyServiceID", "CountPerPrice", "Id", "SellServiceID");

                    b.ToTable("TradePoolMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MakerPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MakerQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MakerTrnNo");

                    b.Property<long>("PoolID");

                    b.Property<long>("SellerListID");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerDisc")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerLoss")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TakerTrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePoolQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradePoolQueueV1", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("MakerPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MakerQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MakerTrnNo");

                    b.Property<string>("MakerType");

                    b.Property<long>("PairID");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerDisc")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerLoss")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("TakerQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TakerTrnNo");

                    b.Property<string>("TakerType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradePoolQueueV1");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeSellerList", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("PoolID");

                    b.Property<long>("BuyServiceID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsProcessing");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("RemainQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("SellServiceID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo", "PoolID");

                    b.HasAlternateKey("PoolID", "TrnNo");

                    b.ToTable("TradeSellerList");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeSellerListV1", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsProcessing");

                    b.Property<short>("OrderType");

                    b.Property<long>("PairID");

                    b.Property<string>("PairName");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ReleasedQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("RemainQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SelledQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo");

                    b.ToTable("TradeSellerListV1");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeStopLoss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("FollowingTo");

                    b.Property<short>("ISFollowersReq");

                    b.Property<decimal>("LTP")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("LeaderTrnNo");

                    b.Property<short>("MarketIndicator");

                    b.Property<long>("PairID");

                    b.Property<decimal>("RangeMax")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("RangeMin")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<decimal>("StopPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("ordertype");

                    b.HasKey("Id");

                    b.ToTable("TradeStopLoss");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TradeTransactionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BidPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DeliveredQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("OrderID");

                    b.Property<decimal>("PendingQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("SellStockID");

                    b.Property<decimal>("SettledQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("StockID");

                    b.Property<decimal>("TotalQty")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TradeTransactionStatus");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TransactionMarketType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowForFollowers");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MarketName");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionMarketType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Transaction.TransactionRecon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("NewStatus");

                    b.Property<short>("OldStatus");

                    b.Property<string>("Remarks")
                        .IsRequired();

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionRecon");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BatchNo");

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("IsSettled");

                    b.Property<long>("RefNo");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<short>("Status");

                    b.Property<DateTime>("TrnDate");

                    b.Property<int>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.HasKey("Id");

                    b.ToTable("TransactionAccounts");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("ChargePer")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal?>("ChargeRs")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short?>("ChargeType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DebitAccountID");

                    b.Property<DateTime>("EmailSendDate");

                    b.Property<Guid>("GUID");

                    b.Property<short>("IsInternalTrn");

                    b.Property<short>("IsVerified");

                    b.Property<long>("MemberID");

                    b.Property<string>("MemberMobile");

                    b.Property<long>("ProductID");

                    b.Property<long>("RouteID");

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<long>("StatusCode");

                    b.Property<string>("StatusMsg");

                    b.Property<string>("TransactionAccount")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("TrnDate");

                    b.Property<short>("TrnMode");

                    b.Property<string>("TrnRefNo");

                    b.Property<short>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<short>("VerifyDone");

                    b.HasKey("Id");

                    b.ToTable("TransactionQueue");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("OprTrnID");

                    b.Property<string>("RequestData")
                        .IsRequired();

                    b.Property<string>("ResponseData");

                    b.Property<DateTime>("ResponseTime");

                    b.Property<long>("SerProDetailID");

                    b.Property<long>("SerProID");

                    b.Property<long>("ServiceID");

                    b.Property<short>("Status");

                    b.Property<string>("TrnID");

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TransactionRequest");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TransactionStatus", b =>
                {
                    b.Property<long>("TrnNo");

                    b.Property<long>("ServiceID");

                    b.Property<long>("SerProID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<string>("StatusMsg");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnNo", "ServiceID", "SerProID");

                    b.HasAlternateKey("SerProID", "ServiceID", "TrnNo");

                    b.ToTable("TransactionStatus");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TrnAcBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TrnAcBatch");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TrnTypeMaster", b =>
                {
                    b.Property<int>("TrnTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Status");

                    b.Property<string>("TrnTypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnTypeId");

                    b.ToTable("TrnTypeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.AllowedIPAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FromIPAddress")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<bool>("Status");

                    b.Property<string>("ToIPAddress")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AllowedIPAddress");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("BizRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Thememode");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("BizUser");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("BizUserPhotos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.CustomPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("CustomPassword");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.IPAddressMaster", b =>
                {
                    b.Property<long>("AutoNo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("FromIP")
                        .IsRequired();

                    b.Property<float>("Lattitude");

                    b.Property<float>("Longitude");

                    b.Property<int>("Status");

                    b.Property<byte[]>("ToIP")
                        .IsRequired();

                    b.HasKey("AutoNo");

                    b.ToTable("IPAddressMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.OtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("OtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.RegisterType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveStatus");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<short>("Status");

                    b.Property<string>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("RegisterType");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.SecurityQuestionMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestionMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempOtpMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("EnableStatus");

                    b.Property<DateTime>("ExpirTime");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("RegTypeId");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("TempOtpMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.TempUserRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(250);

                    b.Property<string>("Mobile");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RegTypeId");

                    b.Property<bool>("RegisterStatus");

                    b.Property<string>("SecurityStemp");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TempUserRegister");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.UserKeyMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("EnableStatus");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.Property<string>("uniqueKey")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UserKeyMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.UserChangeLog.UserLogChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Newvalue");

                    b.Property<string>("Oldvalue");

                    b.Property<short>("Status");

                    b.Property<string>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserLogChange");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.BeneficiaryMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("IsWhiteListed");

                    b.Property<string>("Name");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("BeneficiaryMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.BizUserTypeMapping", b =>
                {
                    b.Property<long>("UserID");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("UserType");

                    b.HasKey("UserID");

                    b.ToTable("BizUserTypeMapping");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.ChargeRuleMaster", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("WalletType");

                    b.Property<int>("ChargeType");

                    b.Property<decimal>("ChargeValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Name");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType", "WalletType");

                    b.ToTable("ChargeRuleMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.ConvertFundHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DestinationPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("FromWalletId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("SourcePrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("ToWalletId");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ConvertFundHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.DepositCounterLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DepositCounterMasterId");

                    b.Property<long>("LastLimit");

                    b.Property<string>("LastTrnID");

                    b.Property<string>("NewTxnID");

                    b.Property<string>("NextBatchPrvID");

                    b.Property<string>("PreviousTrnID");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DepositCounterLog");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.DepositCounterMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("SerProId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastTrnID");

                    b.Property<long>("Limit");

                    b.Property<long>("MaxLimit");

                    b.Property<string>("PreviousTrnID");

                    b.Property<int>("RecordCount");

                    b.Property<short>("Status");

                    b.Property<long>("TPSPickupStatus");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("prevIterationID");

                    b.HasKey("WalletTypeID", "SerProId");

                    b.HasAlternateKey("SerProId", "WalletTypeID");

                    b.ToTable("DepositCounterMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.LimitRuleMaster", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("WalletType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Name");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType", "WalletType");

                    b.ToTable("LimitRuleMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.MemberShadowBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("MemberShadowLimitId");

                    b.Property<string>("Remarks");

                    b.Property<decimal>("ShadowAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletID");

                    b.Property<long>("WalletTypeId");

                    b.HasKey("Id");

                    b.ToTable("MemberShadowBalance");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.MemberShadowLimit", b =>
                {
                    b.Property<long>("MemberTypeId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ShadowLimitAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletType");

                    b.HasKey("MemberTypeId");

                    b.ToTable("MemberShadowLimit");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.StakingChargeMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<long>("UserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MakerCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("StakingHistoryID");

                    b.Property<long>("StakingPolicyDetailID");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeID", "UserID");

                    b.HasAlternateKey("UserID", "WalletTypeID");

                    b.ToTable("StakingChargeMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.StakingPolicyDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("EnableAutoUnstaking");

                    b.Property<short>("EnableStakingBeforeMaturity");

                    b.Property<decimal>("EnableStakingBeforeMaturityCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("InterestType");

                    b.Property<decimal>("InterestValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("InterestWalletTypeID");

                    b.Property<decimal>("MakerCharges")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("RenewUnstakingEnable");

                    b.Property<short>("RenewUnstakingPeriod");

                    b.Property<short>("StakingDurationMonth");

                    b.Property<short>("StakingDurationWeek");

                    b.Property<long>("StakingPolicyID");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerCharges")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("StakingPolicyDetail");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.StakingPolicyMaster", b =>
                {
                    b.Property<long>("WalletTypeID");

                    b.Property<short>("StakingType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("SlabType");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletTypeID", "StakingType");

                    b.HasAlternateKey("StakingType", "WalletTypeID");

                    b.ToTable("StakingPolicyMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.StckingScheme", b =>
                {
                    b.Property<long>("WalletType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MaxLimitAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinLimitAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("Percent");

                    b.Property<short>("Status");

                    b.Property<string>("TimePeriod")
                        .IsRequired();

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("WalletType");

                    b.ToTable("StckingScheme");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.TokenStakingHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChannelID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("EnableAutoUnstaking");

                    b.Property<short>("EnableStakingBeforeMaturity");

                    b.Property<decimal>("EnableStakingBeforeMaturityCharge")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("InterestType");

                    b.Property<decimal>("InterestValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("InterestValueMst")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("InterestWalletTypeID");

                    b.Property<decimal>("MakerCharges")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MaturityAmount");

                    b.Property<DateTime>("MaturityDate");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("RenewUnstakingEnable");

                    b.Property<short>("RenewUnstakingPeriod");

                    b.Property<short>("SlabType");

                    b.Property<decimal>("StakingAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("StakingPolicyDetailID");

                    b.Property<long>("StakingRequestID");

                    b.Property<short>("StakingType");

                    b.Property<short>("Status");

                    b.Property<decimal>("TakerCharges")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletID");

                    b.Property<long>("WalletOwnerID");

                    b.Property<long>("WalletTypeID");

                    b.HasKey("Id");

                    b.ToTable("TokenStakingHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.TokenUnStakingHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountCredited")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChargeBeforeMaturity")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DegradeStakingHistoryRequestID");

                    b.Property<decimal>("InterestCreditedValue")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long>("TokenStakingHistoryID");

                    b.Property<short>("UnstakeType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("TokenUnStakingHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.TradeDepositCompletedTrn", b =>
                {
                    b.Property<string>("Address");

                    b.Property<string>("TrnID");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status");

                    b.HasKey("Address", "TrnID");

                    b.ToTable("TradeDepositCompletedTrn");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.UserPreferencesMaster", b =>
                {
                    b.Property<long>("UserID");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("IsWhitelisting");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("UserID");

                    b.ToTable("UserPreferencesMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.UserStacking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Remarks");

                    b.Property<long>("SchemeId");

                    b.Property<decimal>("StackingAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UserStacking");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletAllowTrn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("Status");

                    b.Property<byte>("TrnType");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("WalletAllowTrns");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletLimitConfiguration", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("WalletId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double?>("EndTimeUnix");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("LifeTime");

                    b.Property<decimal>("LimitPerDay")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerHour")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerTransaction")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double?>("StartTimeUnix");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType", "WalletId");

                    b.ToTable("WalletLimitConfiguration");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletLimitConfigurationMaster", b =>
                {
                    b.Property<int>("TrnType");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("EndTimeUnix")
                        .HasColumnType("float");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("LifeTime");

                    b.Property<decimal>("LimitPerDay")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerHour")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("LimitPerTransaction")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<double>("StartTimeUnix")
                        .HasColumnType("float");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("TrnType");

                    b.ToTable("WalletLimitConfigurationMaster");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletTransactionOrder", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("ChargeAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("DTrnNo");

                    b.Property<long>("DWalletID");

                    b.Property<long>("OTrnNo");

                    b.Property<long>("OWalletID");

                    b.Property<int>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrnDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("OrderID");

                    b.ToTable("WalletTransactionOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WalletTransactionQueue", b =>
                {
                    b.Property<long>("TrnNo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AllowedChannelID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("DeductedChargeAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("ErrorCode");

                    b.Property<Guid>("Guid")
                        .HasMaxLength(50);

                    b.Property<decimal>("HoldChargeAmount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("MemberID");

                    b.Property<decimal>("SettedAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<int>("Status");

                    b.Property<string>("StatusMsg")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TimeStamp")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnRefNo");

                    b.Property<int>("TrnType");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("WalletDeductionType");

                    b.Property<long>("WalletID");

                    b.Property<int>("WalletTrnType");

                    b.Property<string>("WalletType")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("TrnNo");

                    b.ToTable("WalletTransactionQueues");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Wallet.WithdrawHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APITopUpRefNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("Charge");

                    b.Property<long>("Confirmations");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<short>("IsProcessing");

                    b.Property<string>("ProviderWalletID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RouteTag")
                        .IsRequired();

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("SerProID");

                    b.Property<short>("State");

                    b.Property<short>("Status");

                    b.Property<string>("SystemRemarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("TrnDate");

                    b.Property<string>("TrnID")
                        .HasMaxLength(1000);

                    b.Property<long>("TrnNo");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserId");

                    b.Property<decimal>("Value");

                    b.Property<long>("WalletId");

                    b.Property<string>("confirmedTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("createdTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("unconfirmedTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WithdrawHistory");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletLedger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DrAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PostBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("PreBal")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ServiceTypeID");

                    b.Property<short>("Status");

                    b.Property<long>("ToWalletId");

                    b.Property<DateTime>("TrnDate");

                    b.Property<long>("TrnNo");

                    b.Property<int>("TrnType");

                    b.Property<int>("Type");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("WalletId");

                    b.HasKey("Id");

                    b.ToTable("WalletLedgers");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletMaster", b =>
                {
                    b.Property<string>("AccWalletID")
                        .HasMaxLength(16);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("ExpiryDate");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("InBoundBalance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<byte>("IsDefaultWallet");

                    b.Property<bool>("IsValid");

                    b.Property<long?>("OrgID");

                    b.Property<decimal>("OutBoundBalance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("PublicAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<long>("UserID");

                    b.Property<long>("WalletTypeID");

                    b.Property<short>("WalletUsageType");

                    b.Property<string>("Walletname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AccWalletID");

                    b.ToTable("WalletMasters");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DRemarks");

                    b.Property<long>("DWalletMasterID");

                    b.Property<decimal>("DeliveryAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<long?>("DeliveryGivenBy");

                    b.Property<DateTime?>("DeliveryGivenDate");

                    b.Property<string>("ORemarks")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OWalletMasterID");

                    b.Property<decimal>("OrderAmt")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OrderDate");

                    b.Property<int>("OrderType");

                    b.Property<int>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("WalletOrders");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.WalletTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("ConfirmationCount");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short?>("IsDefaultWallet");

                    b.Property<short>("IsDepositionAllow");

                    b.Property<short>("IsTransactionWallet");

                    b.Property<short>("IsWithdrawalAllow");

                    b.Property<short>("Status");

                    b.Property<long?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("WalletTypeName")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.HasKey("Id");

                    b.ToTable("WalletTypeMasters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("BizRolesClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("BizUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("BizUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("BizUserToken");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId");

                    b.Property<string>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasFilter("[ReferenceId] IS NOT NULL");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Log.LoginLog", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Modes.Mode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.Resource.Resources", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.Culture.Cultures", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("CleanArchitecture.Core.Entities.User.ApplicationUserPhotos", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });
#pragma warning restore 612, 618
        }
    }
}
